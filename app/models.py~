from app import db
from sqlalchemy import Column, Integer, String

class user_data(db.Model):
    __tablename__ = 'user_data'
    user_id = db.Column(db.Integer, primary_key = True)
    user_name = db.Column(db.String(30), unique=False)
    city_id_admin = db.Column(db.String(20), unique=False)
    email = db.Column(db.String(100), unique=False)
    password = db.Column(db.String(50), unique=False)

    def __repr__(self):
        return '<user_data %r>' % (self.user_name)

class indicator_def(db.Model):
    __tablename__ = 'indicator_def'
    ind_id = db.Column(db.String(40), primary_key = True)
    name = db.Column(db.String(100), unique=False)
    designation = db.Column(db.String(100), unique=False)
    unit = db.Column(db.String(100), unique=False)
    description = db.Column(db.String(200), unique=False)
    category_id = db.Column(db.String(40), unique=False)
    weight = db.Column(db.Integer, unique=False)
    upper_value = db.Column(db.Integer, unique=False)
    lower_value = db.Column(db.Integer, unique=False)
    target_value = db.Column(db.Integer, unique=False)
    def __repr__(self):
        return '<user_data %r>' % (self.user_name)

ind_id Unique identifier for an indicator Varchar(40)

name Indicator name Varchar(100)

designation The formal name of the indicator Varchar(100)

unit Unit of indicator. Ex: ppm, gram Varchar(100)

description Description of the indicator Varchar(200)

category_id The category which the indicator belongs to. Varchar(40)

weight Weight assigned to the indicator Number(10,5)

upper_value The maximum value that the indicator can take Number(10,5)

lower_value The minimum value of the indicator can take Number(10,5)

target_value The ideal value of the indicator Number(10,5)
